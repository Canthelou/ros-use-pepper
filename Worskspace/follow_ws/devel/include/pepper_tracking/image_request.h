// Generated by gencpp from file pepper_tracking/image_request.msg
// DO NOT EDIT!


#ifndef PEPPER_TRACKING_MESSAGE_IMAGE_REQUEST_H
#define PEPPER_TRACKING_MESSAGE_IMAGE_REQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pepper_tracking
{
template <class ContainerAllocator>
struct image_request_
{
  typedef image_request_<ContainerAllocator> Type;

  image_request_()
    : task()
    , image_name()
    , image_data()  {
    }
  image_request_(const ContainerAllocator& _alloc)
    : task(_alloc)
    , image_name(_alloc)
    , image_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_type;
  _task_type task;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _image_name_type;
  _image_name_type image_name;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _image_data_type;
  _image_data_type image_data;





  typedef boost::shared_ptr< ::pepper_tracking::image_request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pepper_tracking::image_request_<ContainerAllocator> const> ConstPtr;

}; // struct image_request_

typedef ::pepper_tracking::image_request_<std::allocator<void> > image_request;

typedef boost::shared_ptr< ::pepper_tracking::image_request > image_requestPtr;
typedef boost::shared_ptr< ::pepper_tracking::image_request const> image_requestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pepper_tracking::image_request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pepper_tracking::image_request_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pepper_tracking

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'pepper_tracking': ['/home/mis/follow_ws/src/pepper_tracking/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pepper_tracking::image_request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pepper_tracking::image_request_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pepper_tracking::image_request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pepper_tracking::image_request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pepper_tracking::image_request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pepper_tracking::image_request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pepper_tracking::image_request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b557edbbfe4bf3b00801f9e1895f014e";
  }

  static const char* value(const ::pepper_tracking::image_request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb557edbbfe4bf3b0ULL;
  static const uint64_t static_value2 = 0x0801f9e1895f014eULL;
};

template<class ContainerAllocator>
struct DataType< ::pepper_tracking::image_request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pepper_tracking/image_request";
  }

  static const char* value(const ::pepper_tracking::image_request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pepper_tracking::image_request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string task\n\
string image_name\n\
uint8[] image_data\n\
";
  }

  static const char* value(const ::pepper_tracking::image_request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pepper_tracking::image_request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task);
      stream.next(m.image_name);
      stream.next(m.image_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pepper_tracking::image_request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pepper_tracking::image_request_<ContainerAllocator>& v)
  {
    s << indent << "task: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task);
    s << indent << "image_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.image_name);
    s << indent << "image_data[]" << std::endl;
    for (size_t i = 0; i < v.image_data.size(); ++i)
    {
      s << indent << "  image_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.image_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEPPER_TRACKING_MESSAGE_IMAGE_REQUEST_H
